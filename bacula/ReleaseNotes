
          Release Notes for Bacula 1.37.3

  Bacula code: Total files = 411 Total lines = 121,855 (*.h *.c *.in)


Major Changes:
- This version has a new database format that is not compatible
  with previous databases. There are NO upgrade scripts yet.
- Due to the massive changes made during the last two weeks, 
  version 1.37.3 should be considered unstable.  It does, however,
  pass the regression tests.
- SQLite3 support.
- First cut at ANSI labels.
- New communications protocol between DIR and SD to reserve 
  drives.


- Preliminary Python Event support has been added. See below for
  configuration.
  A Python script will be called at particular points or conditions
  in Bacula called Events. The currently defined Events are called:

  StartJob, EndJob, NewVolume

  Where StartJob is called before the RunBeforeJob, EndJob is called 
  after RunAfterJob, and NewVolume, is called before all other 
  "methods" of obtaining a new Volume name, when one is needed.

  The Python script of the same name as the Event name (but with a .py) 
  is called from the Scripts Directory (a directive defined in the
  Director resource).  Note, both the Filename, and the name of
  the function in the file must correspond to the Event name.

  Once the Python script gets control, it can have access to Bacula
  variables by doing:

     import bacula

  The script is called with one argument, typically called j. This
  argument *must* be passed unchanged to each bacula function. The
  format of the call is slightly different for reading Bacula
  variable and for writing bacula variables. See below.

  Bacula variables can be read with:

     bacula.get(j, "Variable-name")

    where j is the argument passed to the function, and Variable-name
    is on of the following:

     JobId, Client, Pool, Storage, Catalog, MediaType, NumVols, DirName,
       Level, Type, Job, JobName, JobStatus

   Bacula varibles can be set using Python keyword arguments:

      bacula.set(jcr=j, VolumeName="xyz")

    The two currently implemented writable "variables" are:

    VolumeName and JobReport

   It is possible to submit a Bacula run command with the following:

     bacula.run(j, "run kernsave client=Matou storage=File")

   this function returns the JobId of the job that was started. If
   there is an error, the return value is zero.

   Example:

== File EndJob.py ===
import bacula

def EndJob(j):
    jobid = bacula.get(j, "JobId")
    client = bacula.get(j, "Client") 
    bacula.set(jcr=j, JobReport="EndJob output: JobId=%d Client=%s.\n" % (jobid, client))
    if (jobid < 5) :
       startid = bacula.run(j, "run kernsave")
       print "Python started jobid=", startid

    return 1
====

== File NewVolume.py ===
import bacula

def NewVolume(j):
    jobid = bacula.get(j, "JobId")
    print "JobId=", jobid
    client = bacula.get(j, "Client") 
    print "Client=" + client
    numvol = bacula.get(j, "NumVols");
    print "NumVols=", numvol
    bacula.set(jcr=j, JobReport="New Volume set for Job.\n") 
    bacula.set(jcr=j, VolumeName="TestA-001")
    return 1
====
- Part files support: File volumes can now be splitted in multiple
  files, called "parts".
- DVD writing support, using parts, and a lot of new directives in
  the Device resource of the Storage configuration file.

New Directives:
- Scripts Directory = <directory> name.  Defines the directory from 
  which Bacula scripts will be called for events. In fact, Bacula
  appends this name to the standard Python list of search directories,
  so the script could also be in any of the Python system directories.
- In FileSet, you can exclude backing up of hardlinks (if you have
  a lot, it can be very expensive), by using:
    HardLinks = no
  in the Options section. Patch supplied by David R Bosso. Thanks.
- MaximumPartSize = bytes (SD, Device resource)
  Defines the maximum part size.
- Requires Mount = Yes/No (SD, Device resource)
  Defines if the device require to be mounted to be read, and if it
  must be written in a special way. If it set, the following directives 
  must be defined in the same Device resource:
  + Mount Point = directory
    Directory where the device must be mounted. 
  + Mount Command = name-string
    Command that must be executed to mount the device. Before the command
    is executed, %a is replaced with the Archive Device, and %m with the 
    Mount Point.
  + Unmount Command = name-string
    Command that must be executed to unmount the device. Before the 
    command is executed, %a is replaced with the Archive Device, and 
    %m with the Mount Point.
  + Write Part Command = name-string
    Command that must be executed to write a part to the device. Before
    the command is executed, %a is replaced with the Archive Device, %m 
    with the Mount Point, %n with the current part number (0-based), 
    and %v with the current part filename.
  + Free Space Command = name-string
    Command that must be executed to check how much free space is left 
    on the device. Before the command is executed, %a is replaced with 
    the Archive Device, %m with the Mount Point, %n with the current part
    number (0-based), and %v with the current part filename.
- Write Part After Job = Yes/No (DIR, Job Resource, and Schedule Resource)
  If this directive is set to yes (default no), a new part file will be
  created after the job is finished.

New Commands:
- "python restart" restarts the Python interpreter. Rather brutal, make
   sure no Python scripts are running. This permits you to change
   a Python script and get Bacula to use the new script.

Items to note!!!
- You must add --with-python=[DIR] to the configure command line
  if you want Python support.  Python 2.2 and 2.3 should be automatically
  detected if in the standard place.
- With Python 2.2 version, the link of the Director gets a few linker
  warnings due to the fact that Python pulls in some old non-secure
  libraries.
- With Python 2.3, there are a few compiler warnings.

Other Items:
- 2 new scripts, dvd-writepart and dvd-freespace, in the scripts directory,
  which are designed to be used as parameters to Write Part Command and
  Free Space Command. They need the dvd+rw-tools to be installed
  (http://fy.chalmers.se/~appro/linux/DVD+RW/).
