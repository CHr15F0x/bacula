Index: src/lib/message.c
===================================================================
--- src/lib/message.c	(révision 6325)
+++ src/lib/message.c	(copie de travail)
@@ -590,6 +590,55 @@
    return true;
 }
 
+static bool dispatch_it(JCR *jcr, int type, DEST *d)
+{
+   bool ret=true;
+
+   if (!bit_is_set(type, d->msg_types)) {
+      return false;
+   }
+
+   /* check if M_FILTER are set */
+   int max=0;
+   set_bit(M_MAX, max);
+
+   if (d->msg_types <= max) {
+      return true;
+   }
+
+   /* check this if msg_types contains a level */
+   switch (jcr->JobLevel) {
+   case L_FULL:
+      ret = bit_is_set(M_FILTER_FULL, d->msg_types);
+      break;
+
+   case L_DIFFERENTIAL:
+      ret = bit_is_set(M_FILTER_DIFFERENTIAL, d->msg_types);
+      break;
+
+   case L_INCREMENTAL:
+      ret = bit_is_set(M_FILTER_INCREMENTAL, d->msg_types);
+      break;
+   }
+
+   /* check this if msg_types contains a jobtype */
+   switch (jcr->JobType) {
+   case JT_BACKUP:
+      ret = bit_is_set(M_FILTER_BACKUP, d->msg_types);
+      break;
+   case JT_VERIFY:
+      ret = bit_is_set(M_FILTER_VERIFY, d->msg_types);
+      break;
+   case JT_RESTORE:
+      ret = bit_is_set(M_FILTER_RESTORE, d->msg_types);
+      break;
+   case JT_MIGRATED_JOB:
+      ret = bit_is_set(M_FILTER_MIGRATION, d->msg_types);
+      break;
+   }
+
+}
+
 /*
  * Handle sending the message to the appropriate place
  */
@@ -649,7 +698,8 @@
        msgs = daemon_msgs;
     }
     for (d=msgs->dest_chain; d; d=d->next) {
-       if (bit_is_set(type, d->msg_types)) {
+       /* check for filter her */
+       if (dispatch_it(jcr, type, d)) {
           switch (d->dest_code) {
              case MD_CATALOG:
                 char ed1[50];
Index: src/lib/message.h
===================================================================
--- src/lib/message.h	(révision 6325)
+++ src/lib/message.h	(copie de travail)
@@ -97,15 +97,27 @@
    M_RESTORED,                        /* ls -l of restored files */
    M_SECURITY,                        /* security violation */
    M_ALERT,                           /* tape alert messages */
-   M_VOLMGMT                          /* Volume management messages */
-};
+   M_VOLMGMT,                         /* Volume management messages */
 
+   /* following options are used as filter */
+   M_FILTER_VERIFY,                   /* verify job */
+   M_FILTER_ADMIN,        	      /* admin job */
+   M_FILTER_RESTORE,      	      /* restore job */
+   M_FILTER_MIGRATION,                /* migration job */
+   M_FILTER_BACKUP,                   /* backup job */
+   M_FILTER_INCREMENTAL,  	      /* incremental backup job */
+   M_FILTER_DIFFERENTIAL, 	      /* differential backup job */
+   M_FILTER_FULL,         	      /* full backup job */
+   M_FILTER_ALL			      /* all */
+};          
+
 #define M_MAX      M_VOLMGMT          /* keep this updated ! */
 
 /* Define message destination structure */
 /* *** FIXME **** where should be extended to handle multiple values */
 typedef struct s_dest {
    struct s_dest *next;
+   int  filter;                       /* message filter (M_FILTER_) */
    int dest_code;                     /* destination (one of the MD_ codes) */
    int max_len;                       /* max mail line length */
    FILE *fd;                          /* file descriptor */
Index: src/lib/parse_conf.c
===================================================================
--- src/lib/parse_conf.c	(révision 6325)
+++ src/lib/parse_conf.c	(copie de travail)
@@ -152,6 +152,16 @@
    {"all",           M_MAX+1},
    {NULL,            0}
 };
+/* following types are used as message filter */
+static struct s_mfilters msg_filters[] = {
+   {"admin",         M_FILTER_ADMIN},
+   {"verify"         M_FILTER_VERIFY},
+   {"restore",       M_FILTER_RESTORE},
+   {"full",          M_FILTER_FULL},
+   {"incremental",   M_FILTER_INCREMENTAL},
+   {"differential",  M_FILTER_DIFFERENTIAL},
+   {NULL,            0}
+};
 
 /* Used for certain KeyWord tables */
 struct s_kw {
@@ -331,6 +341,7 @@
    int i; 
    bool found, is_not;
    int msg_type = 0;
+   int msg_filter = 0;
    char *str;
 
    for ( ;; ) {
