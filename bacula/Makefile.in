# 
# Version $Id$
# 
@MCOMMON@

working_dir=@working_dir@

srcdir =	@srcdir@
VPATH = 	@srcdir@
.PATH:		@srcdir@
topdir = .
thisdir = .


first_rule: all
dummy:

fd_subdirs = src scripts doc src/lib src/findlib src/filed \
	     rescue rescue/linux


subdirs =    src/cats @READLINE_SRC@ src/console src/dird \
	     src/stored @GNOME_DIR@ src/tools

all_subdirs = ${fd_subdirs} ${@ALL_DIRS@}

DIST =	INSTALL README.configure configure Makefile Makefile.in ChangeLog

DIST_CFG = autoconf/aclocal.m4 autoconf/configure.in \
	autoconf/config.h.in  autoconf/acconfig.h  autoconf/Make.common.in \
	autoconf/install-sh autoconf/mkinstalldirs

MKDIR = $(srcdir)/autoconf/mkinstalldirs

#-------------------------------------------------------------------------

all: Makefile
	@for I in ${all_subdirs}; \
	  do (cd $$I; echo "==>Entering directory `pwd`"; \
	      $(MAKE) $@ || (echo ""; echo ""; echo -e "  \a\a ====== Error in `pwd` ======\a\a"; \
			    echo ""; echo "";)); \
	done

depend:
	@for I in ${all_subdirs}; \
	  do (cd $$I; echo "==>Entering directory `pwd`"; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1); done
	
bacula-fd: Makefile	   
	@for I in ${fd_subdirs}; \
	  do (cd $$I; echo "==>Entering directory `pwd`"; \
	      $(MAKE) all || (echo ""; echo ""; echo -e "  \a\a ====== Error in `pwd` ======\a\a"; \
			    echo ""; echo "";)); \
	done

#-------------------------------------------------------------------------
configure: autoconf/configure.in autoconf/aclocal.m4 autoconf/acconfig.h autoconf/config.h.in
	cd $(srcdir);
	autoconf --prepend-include=$(srcdir)/autoconf \
	autoconf/configure.in > configure
	chmod 755 configure
	@rm -f config.cache

config.status:
	if test -x config.status; then config.status --recheck; \
	else $(SHELL) configure; fi

autoconf/config.h.in: autoconf/configure.in autoconf/acconfig.h
	cd $(srcdir);
	autoheader --prepend-include=$(srcdir)/autoconf \
	autoconf/configure.in > autoconf/config.h.in
	chmod 644 autoconf/config.h.in

installdirs:
	$(MKDIR) $(DESTDIR)$(sbindir)
	$(MKDIR) $(DESTDIR)$(sysconfdir)
	$(MKDIR) $(DESTDIR)$(scriptdir)
	$(MKDIR) $(DESTDIR)$(working_dir)
#	$(MKDIR) $(DESTDIR)$(mandir)

install: installdirs
	@for I in $(all_subdirs); do (cd $$I; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1); done

uninstall:
	@for I in $(all_subdirs); do (cd $$I; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1); done

install-autostart: install-autostart-dir install-autostart-fd install-autostart-sd

install-autostart-dir:
	(cd platforms; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1) 

install-autostart-fd:
	(cd platforms; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1) 

install-autostart-sd:
	(cd platforms; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1) 

uninstall-autostart: uninstall-autostart-dir uninstall-autostart-fd uninstall-autrun-sd

uninstall-autostart-dir:
	(cd platforms; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1)

uninstall-autostart-fd:
	(cd platforms; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1)

uninstall-autostart-sd:
	(cd platforms; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1)

Makefile: Makefile.in
	cd $(topdir) \
	    && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

Makefiles:
	$(SHELL) config.status
	(cd scripts; \
	   chmod 755 startmysql stopmysql bacula fd startit stopit btraceback; \
	   chmod 755 mtx-changer bconsole gconsole)
	chmod 755 src/cats/make_mysql_tables src/cats/drop_mysql_tables
	chmod 755 src/cats/make_postgresql_tables src/cats/drop_postgresql_tables
	chmod 755 src/cats/make_sqlite_tables src/cats/drop_sqlite_tables
	chmod 755 src/cats/make_bdb_tables src/cats/drop_bdb_tables
	chmod 755 src/cats/make_test_tables src/cats/drop_test_tables
	chmod 755 src/cats/create_mysql_database
	chmod 755 src/cats/create_postgresql_database
	chmod 755 src/cats/create_bacula_database
	chmod 755 src/cats/make_catalog_backup src/cats/delete_catalog_backup
	chmod 755 src/cats/update_mysql_tables
	chmod 755 src/cats/create_sqlite_database
	chmod 755 src/cats/update_sqlite_tables
	chomd 755 src/cats/update_bacula_tables
	chmod 755 src/cats/create_bdb_database
	chmod 755 src/cats/grant_mysql_privileges
	chmod 755 src/cats/grant_sqlite_privileges
	chmod 755 src/cats/grant_postgresql_privileges
	chmod 755 src/cats/grant_bacula_privileges

clean:
	@for I in ${all_subdirs}; \
	  do (cd $$I; echo "==>Entering directory `pwd`"; ${MAKE} $@ || exit 1); done
	@(cd platforms; echo "==>Entering directory `pwd`"; ${MAKE} $@ || exit 1)
	@$(RMF) *~ 1 2 3 core core.* config.guess console.log console.sum
	@$(RMF) examples/1 examples/2 examples/devices/1 examples/devices/2


# clean for distribution
distclean:
	@for I in $(all_subdirs); do (cd $$I; $(MAKE) $@ || exit 1); done
	@for I in $(all_subdirs); do (cd $$I; $(RMF) startit stopit btraceback); done
	@(cd $(srcdir); $(RMF) *~ config.cache config.h config.log config.status config.out)
	@(cd $(srcdir); $(RMF) Makefile autoconf/Make.common)
	@(cd platforms; echo "==>Entering directory `pwd`"; ${MAKE} $@ || exit 1)
	@$(RMF) bacula fd Makefile startmysql stopmysql startit stopit btraceback
	@$(RMF) bconsole gconsole
	@$(RMF) *~ 1 2 3 core core.* config.guess console.log console.sum
	@$(RMF) working/*
	@$(RMF) -r examples/devices/CVS autoconf/CVS autoconf/gnome-macros/CVS
	@$(RMF) -r doc/techlogs/2002/CVS doc/techlogs/2001/CVS doc/techlogs/1.27/CVS
	@$(RMF) -r examples/CVS intl/CVS scripts/CVS
	@$(RMF) -r po/CVS src/immortal/CVS rescue/freebsd/CVS rescue/solaris/CVS
	@$(RMF) -r CVS src/gnome-console/CVS src/tconsole/CVS

distdirs:
	mkdir ../$(VERNAME);
	mkdir ../$(VERNAME)/autoconf;
	@for I in $(all_subdirs); do (cd $$I; $(MAKE) DESTDIR=$(DESTDIR) $@ || (echo "Failed to make distclean in $$I"; exit 0) ); done

distcopy:
	$(CP) -p $(DIST) ../$(VERNAME);
	$(CP) -p $(DIST_CFG) ../$(VERNAME)/autoconf;
	@for I in $(all_subdirs); do (cd $$I; $(MAKE) DESTDIR=$(DESTDIR) $@ || exit 1); done

distrib: configure autoconf/config.h.in distdirs distcopy

test:


tar.gz:  ../$(VERNAME).tar.gz
../$(VERNAME).tar.gz:
	(cd ..; tar cvf - $(VERNAME) | gzip -f9 > $(VERNAME).tar.gz)

tar.Z: ../$(VERNAME).tar.Z
../$(VERNAME).tar.Z:
	(cd ..; tar cvf - $(VERNAME) | compress > $(VERNAME).tar.Z)

tar.bz2: ../$(VERNAME).tar.bz2
../$(VERNAME).tar.bz2:
	(cd ..; tar cvf - $(VERNAME) | bzip2 -f9 > $(VERNAME).tar.bz2)

uuencode: tar.gz
	uuencode ../$(VERNAME).tar.gz $(VERNAME).tar.gz > ../$(VERNAME).tgz.uu

# ------------------------------------------------------------------------
