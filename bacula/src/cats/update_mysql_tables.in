#!/bin/sh
#
# Shell script to update MySQL Enterprise version 2.6.x to 4.0.x
#  or Bacula Community version 5.0.x to 5.2.x
#
echo " "
echo "This script will update a Bacula MySQL database from version 12 to 13"
echo " which is needed to convert from Bacula Enterprise version 2.6.x to 6.0.x"
echo " or Bacula Community version 5.0.x to 5.2.x"
echo " "
bindir=@MYSQL_BINDIR@
PATH="$bindir:$PATH"
db_name=@db_name@

mysql ${db_name} -e "select VersionId from Version\G" >/tmp/$$
DBVERSION=`sed -n -e 's/^VersionId: \(.*\)$/\1/p' /tmp/$$`
if [ $DBVERSION != 12 ] ; then
   echo " "
   echo "The existing database is version $DBVERSION !!"
   echo "This script can only update an existing version 12 database to version 13."
   echo "Error. Cannot upgrade this database."
   echo " "
   exit 1
fi

if mysql $* -f <<END-OF-DATA
USE ${db_name};

CREATE TABLE RestoreObject (
   RestoreObjectId INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
   ObjectName BLOB NOT NULL,
   RestoreObject LONGBLOB NOT NULL,
   PluginName TINYBLOB NOT NULL,
   ObjectLength INTEGER DEFAULT 0,
   ObjectFullLength INTEGER DEFAULT 0,
   ObjectIndex INTEGER DEFAULT 0,
   ObjectType INTEGER DEFAULT 0,
   FileIndex INTEGER UNSIGNED DEFAULT 0,
   JobId INTEGER UNSIGNED NOT NULL REFERENCES Job,
   ObjectCompression INTEGER DEFAULT 0,
   PRIMARY KEY(RestoreObjectId),
   INDEX (JobId)
);

CREATE INDEX jobhisto_jobid_idx ON JobHisto (JobId);

DELETE FROM Version;
INSERT INTO Version (VersionId) VALUES (13);

END-OF-DATA
then
   echo "Update of Bacula MySQL tables succeeded."
else
   echo "Update of Bacula MySQL tables failed."
fi
exit 0
