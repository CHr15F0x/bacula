#!/bin/sh
#
# shell script to create Bacula PostgreSQL tables
#
bindir=@SQL_BINDIR@

if $bindir/psql $* -f - <<END-OF-DATA
\c bacula

create table version
(
    versionid         integer               not null
);

INSERT INTO Version (VersionId) VALUES (7);

create table counters
(
    counter           text                  not null,
    MinValue          integer                       ,
    maxvalue          integer                       ,
    currentvalue      integer                       ,
    wrapcounter       text                  not null,
    primary key (counter)
);

create table filename
(
    filenameid        serial                not null,
    name              text                  not null,
    primary key (filenameid)
);

create index filename_name_idx on filename (name);

create table path
(
    pathid            serial                not null,
    name              text                  not null,
    primary key (pathid)
);

create index path_name_idx on path (name);

create table fileset
(
    filesetid         serial                not null,
    name              text                  not null,
    md5               text                  not null,
    createtime        timestamp without time zone not null,
    primary key (filesetid)
);

create index fileset_name_idx on fileset (name);

create table pool
(
    poolid            serial                not null,
    name              text                  not null,
    numvols           integer               not null,
    maxvols           integer               not null,
    useonce           smallint              not null,
    usecatalog        smallint              not null,
    acceptanyvolume   smallint                      
        default 0,
    volretention      bigint                not null,
    voluseduration    bigint                not null,
    maxvoljobs        integer               not null,
    maxvolfiles       integer               not null,
    maxvolbytes       bigint                not null,
    autoprune         smallint              not null
        default 0,
    recycle           smallint                      
        default 0,
    pooltype          text                          
        check (pooltype is null or (pooltype in ('Backup','Copy','Cloned','Archive','Migration'))),
    labelformat       text                  not null,
    enabled           smallint              not null
        default 1,
    scratchpoolid     integer                       ,
    recyclepoolid     integer                       ,
    primary key (poolid)
);

create index pool_name_idx on pool (name);

create table client
(
    clientid          serial                not null,
    name              text                  not null,
    uname             text                  not null,
    autoprune         smallint                      
        default 0,
    fileretention     bigint                not null,
    jobretention      bigint                not null,
    primary key (clientid)
);

create unique index client_name_idx on client (name);

create table media
(
    mediaid           serial                not null,
    volumename        text                  not null,
    slot              integer               not null
        default 0,
    poolid            integer               not null,
    mediatype         text                  not null,
    firstwritten      timestamp without time zone not null,
    lastwritten       timestamp without time zone not null,
    labeldate         timestamp without time zone not null,
    voljobs           integer               not null,
    volfiles          integer               not null,
    volblocks         integer               not null,
    volmounts         integer               not null,
    volbytes          bigint                not null,
    volerrors         integer               not null,
    volwrites         integer               not null,
    volcapacitybytes  bigint                not null,
    volstatus         text                  not null
        check (volstatus in ('Full','Archive','Append','Recycle','Purged','Read-Only','Disabled','Error','Busy',
            'Used','Cleaning')),
    recycle           smallint              not null,
    volretention      bigint                not null,
    voluseduration    bigint                not null,
    maxvoljobs        integer               not null,
    maxvolfiles       integer               not null,
    mavvolbytes       bigint                not null,
    drive             integer               not null
        default 0,
    inchanger         smallint              not null
        default 0,
    mediaaddressing   smallint              not null
        default 0,
    primary key (mediaid)
);

create table job
(
    jobid             serial                not null,
    job               text                  not null,
    name              text                  not null,
    type              char(1)               not null,
    level             char(1)               not null,
    clientid          integer               not null,
    jobstatus         char(1)               not null,
    schedtime         timestamp without time zone not null,
    starttime         timestamp without time zone not null,
    endtime           timestamp without time zone not null,
    jobtdate          bigint                not null,
    volsessionid      integer               not null,
    volsessiontime    integer               not null,
    jobfiles          integer               not null,
    jobbytes          bigint                not null,
    joberrors         integer               not null,
    jobmissingfiles   integer               not null,
    poolid            integer               not null,
    filesetid         integer               not null,
    purgedfiles       smallint              not null
        default 0,
    hasbase           smallint              not null
        default 0,
    primary key (jobid)
);

create index job_name_idx on job (name);

create table file
(
    fileid            serial                not null,
    fileindex         integer               not null,
    jobid             integer               not null,
    pathid            integer               not null,
    filenameid        bigint                not null,
    markid            integer               not null
        default 0,
    lstat             text                  not null,
    md5               text                  not null,
    primary key (fileid)
);

create table jobmedia
(
    jobmediaid        serial                not null,
    jobid             integer               not null,
    mediaid           integer               not null,
    firstindex        integer               not null,
    lastindex         integer               not null,
    startfile         integer               not null,
    endfile           integer               not null,
    startblock        integer               not null,
    endblock          integer               not null,
    volindex          integer               not null,
    primary key (jobmediaid)
);

create index job_media_job_id_media_id_idx on jobmedia (jobid, mediaid);

create table basefiles
(
    baseid            serial                not null,
    jobid             integer               not null,
    fileid            integer               not null,
    fileindex         integer                       ,
    basejobid         integer                       ,
    primary key (baseid)
);

create table unsavedfiles
(
    UnsavedId         integer               not null,
    jobid             integer               not null,
    pathid            integer               not null,
    filenameid        integer               not null,
    primary key (UnsavedId)
);

alter table pool
    add foreign key  (scratchpoolid)
       references pool (poolid) on update cascade on delete cascade;

alter table pool
    add foreign key  (recyclepoolid)
       references pool (poolid) on update cascade on delete cascade;

alter table media
    add foreign key  (poolid)
       references pool (poolid) on update cascade on delete cascade;

alter table job
    add foreign key  (poolid)
       references pool (poolid) on update cascade on delete cascade;

alter table job
    add foreign key  (filesetid)
       references fileset (filesetid) on update cascade on delete cascade;

alter table job
    add foreign key  (clientid)
       references client (clientid) on update cascade on delete cascade;

alter table file
    add foreign key  (jobid)
       references job (jobid) on update cascade on delete cascade;

alter table file
    add foreign key  (pathid)
       references path (pathid) on update cascade on delete restrict;

alter table file
    add foreign key  (filenameid)
       references filename (filenameid) on update cascade on delete cascade;

alter table jobmedia
    add foreign key  (jobid)
       references job (jobid) on update cascade on delete cascade;

alter table jobmedia
    add foreign key  (mediaid)
       references media (mediaid) on update cascade on delete cascade;

alter table basefiles
    add foreign key  (jobid)
       references job (jobid) on update cascade on delete cascade;

alter table basefiles
    add foreign key  (fileid)
       references file (fileid) on update cascade on delete cascade;

alter table basefiles
    add foreign key  (basejobid)
       references job (jobid) on update cascade on delete cascade;

alter table unsavedfiles
    add foreign key  (jobid)
       references job (jobid) on update restrict on delete restrict;

alter table unsavedfiles
    add foreign key  (pathid)
       references path (pathid) on update restrict on delete restrict;

alter table unsavedfiles
    add foreign key  (filenameid)
       references filename (filenameid) on update restrict on delete restrict;




END-OF-DATA
then
   echo "Creation of Bacula PostgreSQL tables succeeded."
else
   echo "Creation of Bacula PostgreSQL tables failed."
fi
exit 0
