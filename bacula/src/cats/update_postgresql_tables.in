#!/bin/sh
#
# Shell script to update PostgreSQL tables from version 1.36 to 1.37.3
#
echo " "
echo "This script will update a Bacula PostgreSQL database from version 8 to 9"
echo "Depending on the size of your database,"
echo "this script may take several minutes to run."
echo " "
bindir=@SQL_BINDIR@

if $bindir/psql $* -f - <<END-OF-DATA
\c bacula

ALTER TABLE media ADD COLUMN labeltype integer;
UPDATE media SET labeltype=0;
ALTER TABLE media ALTER COLUMN labeltype SET NOT NULL;
ALTER TABLE media ADD COLUMN StorageId integer;
UPDATE media SET StorageId=0;

ALTER TABLE pool ADD COLUMN labeltype integer;
UPDATE pool set labeltype=0;
ALTER TABLE pool ALTER COLUMN labeltype SET NOT NULL;
ALTER TABLE pool ADD COLUMN NextPoolId	      integer;
ALTER TABLE pool SET NextPoolId=0;
ALTER TABLE pool ADD COLUMN MigrationHighBytes BIGINT;
ALTER TABLE pool SET MigrationHighBytes=0;
ALTER TABLE pool ADD COLUMN MigrationLowBytes  BIGINT;
ALTER TABLE pool SET MigrationLowBytes=0;
ALTER TABLE pool ADD COLUMN MigrationTime      BIGINT;
ALTER TABLE pool SET MigrationTime=0;


ALTER TABLE media ADD COLUMN volparts integer;
UPDATE media SET volparts=0;
ALTER TABLE media ALTER COLUMN volparts SET NOT NULL;

CREATE TABLE MediaType (
   MediaTypeId SERIAL,
   MediaType TEXT NOT NULL,
   ReadOnly INTEGER DEFAULT 0,
   PRIMARY KEY(MediaTypeId)
   );

CREATE TABLE Device (
   DeviceId SERIAL,
   Name TEXT NOT NULL,
   MediaTypeId INTEGER NOT NULL,
   StorageId INTEGER UNSIGNED,
   DevMounts INTEGER NOT NULL DEFAULT 0,
   DevReadBytes BIGINT NOT NULL DEFAULT 0,
   DevWriteBytes BIGINT NOT NULL DEFAULT 0,
   DevReadBytesSinceCleaning BIGINT NOT NULL DEFAULT 0,
   DevWriteBytesSinceCleaning BIGINT NOT NULL DEFAULT 0,
   DevReadTime BIGINT NOT NULL DEFAULT 0,
   DevWriteTime BIGINT NOT NULL DEFAULT 0,
   DevReadTimeSinceCleaning BIGINT NOT NULL DEFAULT 0,
   DevWriteTimeSinceCleaning BIGINT UNSIGNED DEFAULT 0,
   CleaningDate TIMESTAMP WITHOUT TIME ZONE,
   CleaningPeriod BIGINT NOT NULL DEFAULT 0,
   PRIMARY KEY(DeviceId)
   );

CREATE TABLE Storage (
   StorageId SERIAL,
   Name TEXT NOT NULL,
   AutoChanger INTEGER DEFAULT 0,
   PRIMARY KEY(StorageId)
   );

vacuum;

END-OF-DATA
then
   echo "Update of Bacula PostgreSQL tables succeeded."
else
   echo "Update of Bacula PostgreSQL tables failed."
fi
exit 0
